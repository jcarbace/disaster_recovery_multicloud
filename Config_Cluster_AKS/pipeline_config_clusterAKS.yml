trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  - name: secure_file
    value: 'service_account.json'
  - group: Azure

stages:
- stage: InfraestructureCheck
  jobs:
  - job: InfraestructureCheck
    displayName: 'Infraestructure Check'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
        az aks get-credentials --resource-group capstone-grupo-aks --name cluster-aks-group --overwrite-existing
        echo 'Conexión establecida correctamente con Azure.'
        
        az group show --name capstone-grupo-aks --output json
        if [ $? -eq 0 ]; then
          echo "El grupo de recursos existe. Ejecutar el flujo de trabajo..."
        else
          echo "El grupo de recursos no existe. No se ejecutará el flujo de trabajo."
          exit 0
        fi
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

- stage: LoginAz
  jobs:
  - job: LoginAz
    displayName: 'Login Azure'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
        az aks get-credentials --resource-group capstone-grupo-aks --name cluster-aks-group --overwrite-existing
        echo 'Conexión establecida correctamente con Azure.'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

- stage: OpenPortsNSG
  displayName: 'Open ports NSG'
  jobs:
  - job: OpenPortsNSG
    displayName: 'Open ports NSG'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
        az aks get-credentials --resource-group capstone-grupo-aks --name cluster-aks-group --overwrite-existing
        echo 'Conexión establecida correctamente con Azure.'
      displayName: 'Azure Login'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

    - script: |
        # Nombre completo del Grupo de Recursos
        resourceGroupName="MC_capstone-grupo-aks_cluster-aks-group_uksouth"

        # Obtener los NSG cuyo nombre comienza con 'aks'
        capstoneNSG=$(az network nsg list --query "[?starts_with(name, 'aks')].[name]" --resource-group $resourceGroupName --output tsv | head -n 1)

        for nsg in $capstoneNSG; do
            az network nsg rule create \
                --name Allow80port \
                --nsg-name $nsg \
                --priority 1010 \
                --resource-group $resourceGroupName \
                --access Allow \
                --direction Inbound \
                --protocol Tcp \
                --source-address-prefixes '*' \
                --source-port-ranges '*' \
                --destination-address-prefixes '*' \
                --destination-port-ranges 80
        done

      displayName: 'Open NSG 80 port'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

    - script: |
        # Nombre completo del Grupo de Recursos
        resourceGroupName="MC_capstone-grupo-aks_cluster-aks-group_uksouth"

        # Obtener los NSG cuyo nombre comienza con 'aks'
        capstoneNSG=$(az network nsg list --query "[?starts_with(name, 'aks')].[name]" --resource-group $resourceGroupName --output tsv | head -n 1)

        for nsg in $capstoneNSG; do
            az network nsg rule create \
                --name Allow8080port \
                --nsg-name $nsg \
                --priority 1020 \
                --resource-group $resourceGroupName \
                --access Allow \
                --direction Inbound \
                --protocol Tcp \
                --source-address-prefixes '*' \
                --source-port-ranges '*' \
                --destination-address-prefixes '*' \
                --destination-port-ranges 8080
        done
      displayName: 'Open  NSG 8080 port'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

- stage: ConfigAKS
  displayName: 'Config cluster AKS'
  jobs:
  - job: configAkS
    displayName: 'Config cluster AKS'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
        az aks get-credentials --resource-group capstone-grupo-aks --name cluster-aks-group --overwrite-existing
        echo 'Conexión establecida correctamente con Azure.'
      displayName: 'Azure Login'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

    - script: |
        kubectl apply -f cluster_config.yaml --validate=false
      displayName: 'Config cluster'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

    - script: |
        # Esperar a que el pod esté listo
        pod_ready="0"
        end_time=$(($(date +%s) + 300))  # Tiempo máximo de espera (300 segundos)
        while [ "$(date +%s)" -le "$end_time" ]; do
            if kubectl get pods -l app=mysql -o=jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep True &> /dev/null; then
                pod_ready="1"
                break
            fi
            sleep 50
        done
        if [ "$pod_ready" != "1" ]; then
            echo "Error: El pod de MySQL no está listo después de 5 minutos de espera."
            exit 1
        fi      
      displayName: 'Wait to cluster config'

    - script: |
        kubectl exec -n default $(kubectl get pods -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- mysql -u root -pyourpasAsword -e "CREATE DATABASE prueba;"
      displayName: 'Create database'

    - script: |
        kubectl exec -n default $(kubectl get pods -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- mysql -u root -pyourpasAsword -e "USE prueba; CREATE TABLE productos(id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(255), marca VARCHAR(255), precio DECIMAL(10,2));"
      displayName: 'Create table'

    - script: |
        kubectl exec -n default $(kubectl get pods -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- mysql -u root -pyourpasAsword -e "USE prueba; INSERT INTO productos (nombre, marca, precio) VALUES ('Producto1', 'Marca1', 10.99), ('Producto2', 'Marca2', 20.99), ('Producto3', 'Marca3', 30.99), ('Producto4', 'Marca4', 40.99);"
      displayName: 'Insert products table'

- stage: UpdateTrafficManagerEndpoint
  displayName: 'Update Traffic Manager Endpoint'
  dependsOn: ConfigAKS
  jobs:
  - job: UpdateEndpoint
    displayName: 'Update Traffic Manager Endpoint'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
        az aks get-credentials --resource-group capstone-grupo-aks --name cluster-aks-group --overwrite-existing
        echo 'Conexión establecida correctamente con Azure.'
      displayName: 'Azure Login'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

    - script: |
        # Obtener la dirección IP pública del servicio de balanceo de carga
        service_ip=$(kubectl get svc -n default debian-capstone-service -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')

        # Crear un nuevo endpoint en el Traffic Manager
        trafficManagerProfile='tmcapstoneprofile'
        endpointName='server-capstone-endpoint'
        az network traffic-manager endpoint create \
            -g traffic-manager-capstone \
            --profile-name $trafficManagerProfile \
            -n $endpointName \
            --target $service_ip \
            --type externalEndpoints \
            --priority 1 \
            --weight 5
      displayName: 'Configurar Endpoint en Traffic Manager'

- stage: ShowTrafficManagerURL
  displayName: 'Show Traffic Manager URL'
  dependsOn: UpdateTrafficManagerEndpoint
  jobs:
  - job: ShowURL
    displayName: 'Show Traffic Manager URL'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
    - script: |
        # Obtener la URL del Traffic Manager
        tm_profile='tmcapstoneprofile'
        traffic_manager_url=$(az network traffic-manager profile show --name tmcapstoneprofile --resource-group traffic-manager-capstone --query "dnsConfig.fqdn" --output tsv)

        # Mostrar la URL del Traffic Manager en el mensaje
        echo "Traffic Manager URL: $traffic_manager_url"
      displayName: 'Show Traffic Manager URL'
      env:
        ARM_CLIENT_ID: $(ClientId)
        ARM_CLIENT_SECRET: $(Secret)
        ARM_SUBSCRIPTION_ID: $(Subscription)
        ARM_TENANT_ID: $(TenantId)

