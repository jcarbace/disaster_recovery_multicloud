trigger: none

variables:
  - group: CREDENTIALS
  - name: terraformVersion
    value: 1.2.5
  - name: secure_file
    value: "service_account.json"

parameters:
  - name: destroy
    type: boolean
    default: false

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Healthcheck
    jobs:
      - job: CheckHealth
        steps:
          - script: |
              echo 'Realizando healthcheck...'
              response=$(curl --write-out '%{http_code}' --silent --output /dev/null http://trafficmancapstone.trafficmanager.net)
              if [ $response -eq 200 ]
              then
                echo 'Healthcheck exitoso.'
                exit 0
              else
                echo 'Healthcheck fallido. Iniciando proceso de recuperaci칩n...'
                exit 1
              fi
            displayName: "Healthcheck"
            name: healthcheck
  - stage: Recovery
    displayName: "Recuperaci칩n"
    condition: failed()
    jobs:
      - job: Recover
        steps:
          - task: DownloadSecureFile@1
            inputs:
              secureFile: ${{ variables.secure_file }}

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: "Install Terraform $(terraformVersion)"
            inputs:
              terraformVersion: $(terraformVersion)

          - powershell: |
              terraform --version
              Copy-Item $(Agent.TempDirectory)/${{ variables.secure_file }} ../../service_account.json
              terraform init -reconfigure
            displayName: "TF Init"

          - powershell: |
              if ("${{parameters.destroy}}" -eq "True") {
                Copy-Item $(Agent.TempDirectory)/${{ variables.secure_file }} ../../service_account.json
                terraform plan -destroy -out="./out.plan" -var-file="env.tfvars"
              } else {
                Copy-Item $(Agent.TempDirectory)/${{ variables.secure_file }} ../../service_account.json
                terraform plan -out="./out.plan" -var-file="env.tfvars"
              }
            displayName: "TF Plan"
          - powershell: |
              Copy-Item $(Agent.TempDirectory)/${{ variables.secure_file }} ../../service_account.json
              terraform apply -input=false -auto-approve out.plan
            displayName: "TF Apply"

  - stage: ConfigClusterGKE
    displayName: "Configuraci칩n del Cluster GKE"
    dependsOn: Recovery
    condition: failed()
    jobs:
      - job: Despliegue_Cluster
        steps:
          - script: |
              Copy-Item $(Agent.TempDirectory)/${{ variables.secure_file }} ../../service_account.json
              gcloud auth activate-service-account --key-file=${{ variables.secure_file }}
              gcloud container clusters get-credentials capstone-cluster --zone=us-central1-a --project=proyectodani
            displayName: 'Authenticate with Google Cloud SDK'
          
          - script: echo $(AGENT.OS)
            displayName: 'Show Agent OS'

          
          - script: |
              # Deshabilitar las interacciones interactivas
              export CLOUDSDK_CORE_DISABLE_PROMPTS=1
              # Descargar el complemento gke-gcloud-auth-plugin
              curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-472.0.0-linux-arm.tar.gz
              tar -xf google-cloud-cli-472.0.0-linux-arm.tar.gz
              ./google-cloud-sdk/install.sh

              # Iniciar gcloud init y responder autom치ticamente "N" para la pregunta
              ./google-cloud-sdk/bin/gcloud init | echo Y
          - script: |
              gcloud init
              sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin
              sudo apt-get install kubectl
          - task: Kubernetes@1
            displayName: 'Kubectl apply'
            inputs:
              connectionType: 'None'
              command: 'apply'
              arguments: '-f $(System.DefaultWorkingDirectory)/cluster_config.yaml --validate=false'

          - script: |
              kubectl exec -n default $(kubectl get pods -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- mysql -uroot -p yourpassword -e "CREATE DATABASE prueba;"
            displayName: 'Create database'

          - script: |
              kubectl exec -n default $(kubectl get pods -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- mysql -uroot -p yourpassword -e "USE prueba; CREATE TABLE productos(id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(255), marca VARCHAR(255), precio DECIMAL(10,2));"
            displayName: 'Create table'

          - script: |
              kubectl exec -n default $(kubectl get pods -l app=mysql -o jsonpath="{.items[0].metadata.name}") -- mysql -uroot -p yourpassword -e "USE prueba; INSERT INTO productos (nombre, marca, precio) VALUES ('Producto1', 'Marca1', 10.99), ('Producto2', 'Marca2', 20.99), ('Producto3', 'Marca3', 30.99), ('Producto4', 'Marca4', 40.99);"
            displayName: 'Insert products table'

  - stage: CargaBackupMysql
    displayName: "Carga del Backup Mysql"
    condition: failed()
    dependsOn: ConfigClusterGKE
    jobs:
      - job: RecoveryDB
        steps:
          - task: PowerShell@2
            inputs:
              secureFile: ${{ variables.secure_file }}
              script: |
                # Definir variables para el backup
                $username = "root"
                $password = "yourpasAsword"
                $database = "prueba"
                $server = "mysql"
                $directorio = "gs://capstonebucket-jd/a/home/backups"

                $archivos = Get-ChildItem $directorio | Where-Object { $_.Extension -eq ".sql" }

                $archivoMasReciente = $archivos | Sort-Object LastWriteTime -Descending | Select-Object -First 1

                $nombreArchivoMasReciente = $archivoMasReciente.Name

                $rutaArchivoMasReciente = Join-Path -Path $directorio -ChildPath $nombreArchivoMasReciente

                kubectl exec $server -- /bin/bash -c "mysql -u $username -p$password $database < $backupFile"